Subject:   RE: How do you use the DEBUG Macro?
From:      "Paul Gillis" <pgillis@pc-link.com.au>
Date:      Fri, 1 Jan 2010 13:23:18 +1100
To:        "'Sam Golob'" <sbgolob@cbttape.org>

Hi Sam,

My apologies as there was something missing from the file so here
is a replacement. It has DEBUGDOC and SHELL as additional members,
where DEBUGDOC is just that and SHELL is my starter shell for any
assembler code I might want to write from scratch and it has
samples of how I use the DEBUG macro.

In SHELL, the initial invocation of DEBUG sets all the global
variables, allocates and then opens SYSDEBUG etc. The second prints
28 characters of storage from SHELL+5. The third prints the value
in variable SYSTEMNM for 8 characters. The fourth closes and
deallocates the SYSDEBUG DD. The fifth allocates the debug
constants, and the sixth allocates the debug variables separately
for re-entrant programs.

So for copymods, you must have an invocation debug a termination
debug (if using SYSDEBUG) and two allocation debugs as a minimum.
Then any number of data debugs. What I normally do if I am unsure
of who is changing a variable is to put a debug after every change
to the variable and one where I expect it to be used. Use a
different ID value to identify where in the code this debug came
from

          DEBUG ID=STEP1,(STRIPFLG,1,X),(XXX,8,C),(YYY,4,B)
          DEBUG ID=STEP2,(STRIPFLG,1,X)
          DEBUG ID=STEP3,(STRIPFLG,1,X)

This code just puts displays in the code at set points, but
simplifies the process of doing so with most of the work done in
a separate CSECT.

Cheers, Paul


