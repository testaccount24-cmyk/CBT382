         MACRO
         DEBUG &ID=NO,&DATA=YES,&TEST=YES,&MAXLEN=100,&TYPE=WTO,       *
               &EP=EPLOC,&OPEN=NO,&CLOSE=NO,&PRINT=SYSDEBUG,&TIME=NO,  *
               &ROUTCDE=11,&RC=ZERO,&RCVAR=RC,&PGMBASE=R12,&RENT=YES,  *
               &USING=(GS,R13),&USING2=,&PRINTGEN=YES,&REG=REG,        *
               &LABEL=DEBUG,&DEBBASE=R2,&MODE=YES,&EXTERNAL=NO
.**********************************************************************
.*                                                                    *
.* Macro Name:           DEBUG                                        *
.*                                                                    *
.* Operating System:     OS/390 V2R10 through z/OS 1.9                *
.*                                                                    *
.* Function:             Allow almost any field within an assembler   *
.*                       program to be output to a DEBUG file for     *
.*                       problem analysis.                            *
.*                                                                    *
.* Purpose:              Make my life easier                          *
.*                                                                    *
.* Module Type:          Macro                                        *
.*                                                                    *
.* Language:             Assembler                                    *
.*                                                                    *
.* Attributes:           Any Key                                      *
.*                       Problem State                                *
.*                       Re-Entrant                                   *
.*                       AMODE(ANY)                                   *
.*                       RMODE(ANY)                                   *
.*                       BAKR/PR                                      *
.*                                                                    *
.* Author:               Paul Gillis, P. C. Link Pty. Ltd.            *
.*                                                                    *
.* Copyright:            Paul Gillis, P. C. Link Pty. Ltd.            *
.*                                                                    *
.**********************************************************************
.*
.* Changes:
.*       V3    Cater for long hexadecimal requests
.*       V4    Tighten up on the storage requirements
.*       V5    Move LOG code into a sub-routine
.*       V6    Conditionally If RC selected and is 0 then do not debug
.*       V7    Place most debug code into the DEBUG CSECT
.*       V8    Add Date to TimeStamp
.*       V9    Dynalloc the SYSDEBUG DD
.*       V10   Alternate names for register equates and DEBUG lables
.*       V11   Allow multiple base registers for DEBUG000 CSECT-notyet-
.*       V12   Allow DEBUG under control of external variable
.*       V13   DEBUG Data Type "B" Convert Binary to Numeric
.*       V14   Fix bug when external variable control is used
.*       V15   Fix bug when TIME=YES is used
.*       V16   Fix bug when RC=NZERO
.*       V17   What idiot used R9 as a base for dynalloc data
.*       V18   PGMBASE handles up to 4 base registers
.*
.**********************************************************************
.*
.*       ID=NO | VALUE
.*             Provides a unique ID for a DEBUG DATA=YES statement
.*
.*       (Field,Length,Type)
.*             Coded when ID=value, supplies the "Field" name to
.*             display, its "Length" and its "Type".
.*             Default Type is "X" for hexadecimal, else "C" for
.*             character display or B to convert a binary to numeric
.*
.*       DATA=YES | V | C | G
.*             Generates data constants for V(variable storage)
.*             Generates data constants for C(constant storage)
.*             Generates G(global parameters), used with TYPE & MAXLEN
.*
.*       TEST=YES
.*             Only generates code if SYSPARM(TEST) is used
.*
.*       MAXLEN=100
.*             Maximum amount of data that can be displayed in bytes
.*
.*       TYPE=WTO | LOG | PUT | WTL
.*             How the message is to be issued. WTO or ISPF LOG dataset
.*             WTL or PUT to &PRINT (Which must be open)
.*
.*       EP=EPLOC
.*             Provides the ISPLINK entry point for TYPE=LOG
.*
.*       OPEN=NO | YES
.*             Generate and OPEN the &PRINT DCB for TYPE=PUT
.*
.*       CLOSE=NO | YES
.*             Close the &PRINT DCB for TYPE=PUT
.*
.*       PRINT=SYSDEBUG | ddname
.*             DD name of the print output DD and label on the DCB mac
.*
.*       TIME=NO | YES
.*             Insert the time in the debug message instead of csect id
.*
.*       ROUTCDE=11 | n
.*             Insert the ROUTCDE if 11 is not required for WTO
.*
.*       RC=ZERO | NZERO
.*             If RC=NZERO on a Global call, and RC is selected on
.*             a debug call and the value of RC is "0" then do not
.*             debug the statement. RC must be the first data field
.*
.*       RCVAR=RC | variable name
.*             If RCVAR=RC then the internal variable for Return Code
.*             is RC, otherwise use the variable name supplied
.*
.*       PGMBASE=R12 | program base Registers
.*
.*       RENT=YES | NO
.*             if RENT=YES, the work data area is in the main CSECT
.*             if RENT=NO, the work data area is in the main DSECT
.*
.*       PRINTGEN = YES | NO
.*             All DBUG0000 data has PRINT GEN(YES) PRINT NOGEN(NO)
.*
.*       USING=(GS,R13) | (dsect,base)
.*             Define the programs work area and its base register
.*
.*       USING2= (dsect,base)
.*             Define a temporary work area and its base register
.*
.*       REG=REG | name
.*             Define the prefix for general purpose registers savearea
.*
.*       LABEL=DEBUG | prefix
.*             Define the prefix for all other variables used by DEBUG
.*
.*       DEBBASE=R2
.*             D
.*
.*       MODE=YES | NO
.*             Generate AMODE(31),RMODE(ANY) on the DEBUG000 CSECT
.*
.*       EXTERNAL=NO
.*             Contents of variable DEBUGXTN(Y) control use of DEBUG
.*
.**********************************************************************
.*
.*       Normal usage as described below, place statements into the
.*       right place in your code.
.*
.*       DEBUG DATA=G,TYPE=PUT,MAXLEN=132,OPEN=YES
.*       DEBUG ID=STEP1,(REG01,4,X),(RC,1,X),(NAME,8,C),(IN,4,B)
.*       DEBUG DATA=G,CLOSE=YES
.*       DEBUG DATA=C                  Debug Constants
.*       DEBUG DATA=V                  Debug Variables
.*
.**********************************************************************
         LCLA  &CNT,&L1,&L2,&L3,&L4,&L5,&L6,&L7,&L8,&LENGTH,&N,&MAX
         LCLC  &C1
         GBLC  &DEBUGTY,&DEBUGOP,&DEBUGDD,&DEBUGTM,&DEBUGEP,&DEBUGRO
         GBLC  &DEBUGRC,&DEBUGR1,&DPGMBAS,&DBUGRNT,&DBUGUSE,&DBUGPGN
         GBLC  &DEBUGLB,&DEBUGRG,&DBUGBAS
         GBLC  &DEBUGXT
         GBLA  &DEBUGML
         GBLC  &CSECT
         AIF   ('&TEST' NE 'YES').SYSP
         AIF   ('&SYSPARM' NE 'TEST').EXIT
.**********************************************************************
.*       Output the required Debug Data Headers
.**********************************************************************
.SYSP    ANOP
         AIF   ('&ID' EQ 'NO').DATA
.*entry-start-
         AIF   ('&DEBUGXT' EQ 'NO').EXTERN1
         CLI   &DEBUGLB.XTN,C'Y'           Externally Controlled Debug
         BNE   DEBUG_Z&SYSNDX          ===> No, Skip Debug Call
.EXTERN1 ANOP
         STM   R14,R13,&DEBUGLB.SAV
         L     R15,=A(DBUG&SYSNDX)     Address of the debug entry
         BALR  R14,R15                 ===> Invoke Debug Routine
         PUSH  USING
         PUSH  PRINT
         PRINT &DBUGPGN
&DEBUGLB.000 CSECT
DBUG&SYSNDX DS 0H
         DROP  ,                       Drop all usings
         BAKR  R14,0                   Save the callers environment
         LR    &DBUGBAS,R15            Set Base
         USING DBUG&SYSNDX,&DBUGBAS
         USING &CSECT,&DPGMBAS
         AIF   ('&DBUGUSE' EQ '').USING1
         USING &DBUGUSE
.USING1  ANOP
         AIF   ('&USING2(2)' EQ '').USING2A
         USING &USING2(1),&USING2(2)
.USING2A ANOP
.*entry-end-
         AIF   ('&DEBUGRC' EQ 'ZERO').RC1
         AIF   ('&SYSLIST(1,1)' NE '&DEBUGR1').RC1
         CLI   &DEBUGR1,0                Return Code check required
         BE    DEBU&SYSNDX               ===> RC=0, skip debug
.RC1     ANOP
         MVC   &DEBUGLB.WTO,&DEBUGLB.CON
&L1      SETA  4
         AIF   ('&DEBUGTM' EQ 'NO').NOTIME
&L1      SETA  22
         BAL   R3,&DEBUGLB.TIM
         L     R3,&DEBUGRG.03
.NOTIME  ANOP
         LA    R1,&DEBUGLB.WTO+&L1
&N       SETA  K'&CSECT
         MVC   0(&N,R1),ZZA&SYSNDX
&N       SETA  K'&ID
         MVC   9(&N,R1),ZZB&SYSNDX
         LA    R1,18(R1)
         AIF   (N'&SYSLIST EQ 0).MESSAGE
.**********************************************************************
.*       Loop through the input parameters
.**********************************************************************
&CNT     SETA  1
&LENGTH  SETA  18
.LOOP    ANOP
&N       SETA  N'&SYSLIST
         AIF   ('&SYSLIST(&CNT,2)' NE '').GETLENG
&L1      SETA  L'&SYSLIST(&CNT,1)
         AGO   .GOTLENG
.GETLENG ANOP
&L1      SETA  &SYSLIST(&CNT,2)
.GOTLENG ANOP
&L2      SETA  &L1+1
&L3      SETA  &L1*2
&L4      SETA  &L3+1
&L5      SETA  K'&SYSLIST(&CNT,1)+1
         MVC   0(&L5,R1),ZZC&SYSNDX&CNT
         LA    R1,&L5.(R1)
&LENGTH  SETA  &LENGTH+&L5
         AIF   ('&SYSLIST(&CNT,3)' EQ 'X').HEX
         AIF   ('&SYSLIST(&CNT,3)' EQ 'C').CHAR
         AIF   ('&SYSLIST(&CNT,3)' EQ 'B').BINARY
.**********************************************************************
.*       Process short hexadecimal requests
.**********************************************************************
.HEX     ANOP
         AIF   (&L1 GT 7).HEXLONG
         UNPK  &DEBUGLB.WK(&L4),&SYSLIST(&CNT,1)(&L2)
         TR    &DEBUGLB.WK(&L3),&DEBUGLB.TRT-240
         MVC   0(&L3,R1),&DEBUGLB.WK
&CNT     SETA  &CNT+1
&LENGTH  SETA  &LENGTH+&L4
         AIF   (&CNT GT N'&SYSLIST).MESSAGE
         LA    R1,&L4.(R1)
         AGO   .DONE
.**********************************************************************
.*       Process long hexadecimal requests
.**********************************************************************
.HEXLONG ANOP
         LA    R14,&SYSLIST(&CNT,1)
         LA    R15,&L1
DEB&CNT&SYSNDX DS 0H
         UNPK  &DEBUGLB.WK(9),0(5,R14)
         TR    &DEBUGLB.WK(8),&DEBUGLB.TRT-240
         MVC   0(8,R1),&DEBUGLB.WK
         MVI   8(R1),C','
         LA    R14,4(R14)
         LA    R1,9(R1)
         SH    R15,=H'4'
         BP    DEB&CNT&SYSNDX
         BCTR  R1,0
         MVI   0(R1),C' '
&CNT     SETA  &CNT+1
&LENGTH  SETA  &LENGTH+&L4
         AIF   (&CNT GT N'&SYSLIST).MESSAGE
         LA    R1,1(R1)
         AGO   .DONE
.**********************************************************************
.*       Process binary request 1, 2, 3 or 4 bytes long
.**********************************************************************
.BINARY  ANOP
         AIF   ('&SYSLIST(&CNT,2)' EQ '1').BINARY1
         AIF   ('&SYSLIST(&CNT,2)' EQ '2').BINARY2
         AIF   ('&SYSLIST(&CNT,2)' EQ '3').BINARY3
         AIF   ('&SYSLIST(&CNT,2)' EQ '4').BINARY4
         MNOTE 8,'BINARY Not 1,2,3, or 4 but &SYSLIST(&CNT,2)'
         AGO   .EXIT
.BINARY1 ANOP
&L4      SETA  3
&L5      SETA  6
&L6      SETA  2
&L8      SETA  1
         AGO   .BINARY5
.BINARY2 ANOP
&L4      SETA  5
&L5      SETA  5
&L6      SETA  3
&L8      SETA  3
         AGO   .BINARY5
.BINARY3 ANOP
&L4      SETA  7
&L5      SETA  4
&L6      SETA  4
&L8      SETA  7
         AGO   .BINARY5
.BINARY4 ANOP
&L4      SETA  11
&L5      SETA  2
&L6      SETA  6
&L8      SETA  15
         AGO   .BINARY5
.BINARY5 ANOP
&L7      SETA  &L4-1
&C1      SETC  '&L5.(&L6)'
         XR    R14,R14                 Zero R14
         ICM   R14,&L8,&SYSLIST(&CNT,1)
         CVD   R14,&DEBUGLB.DB
         UNPK  &DEBUGLB.WK(&L4),&DEBUGLB.DB+&C1
         OI    &DEBUGLB.WK+&L7,X'F0'
         MVC   0(&L4,R1),&DEBUGLB.WK
&CNT     SETA  &CNT+1
&LENGTH  SETA  &LENGTH+&L4
         AIF   (&CNT GT N'&SYSLIST).MESSAGE
&L4      SETA  &L4+1
         LA    R1,&L4.(R1)
         AGO   .DONE
.**********************************************************************
.*       Process a character request
.**********************************************************************
.CHAR    ANOP
         MVC   0(&L1,R1),&SYSLIST(&CNT,1)
&CNT     SETA  &CNT+1
&LENGTH  SETA  &LENGTH+&L2
         AIF   (&CNT GT N'&SYSLIST).MESSAGE
         LA    R1,&L2.(R1)
.DONE    ANOP
         AIF   (&CNT LE N'&SYSLIST).LOOP
.**********************************************************************
.*       Ensure that the message buffer is big enough
.**********************************************************************
.MESSAGE ANOP
         AIF   (&LENGTH LE &DEBUGML).LOGCHK
         MNOTE 8,'DEBUG WTO BUFFER USED &LENGTH OF &DEBUGML BYTES'
         MNOTE 8,'WTO BUFFER TOO SMALL TO CONTAIN &LENGTH BYTES'
         AGO   .EXIT
.**********************************************************************
.*       Work out what to do with the buffer
.**********************************************************************
.LOGCHK  ANOP
         AIF   ('&DEBUGTY' EQ 'LOG').LOG
         AIF   ('&DEBUGTY' EQ 'WTL').WTL1
         AIF   ('&DEBUGTY' EQ 'PUT').PUT
         WTO   MF=(E,&DEBUGLB.WTO)
         AGO   .EXITCHK
.WTL1    ANOP
         WTL   MF=(E,&DEBUGLB.WTO)
         AGO   .EXITCHK
.PUT     ANOP
         PUT   &DEBUGDD,&DEBUGLB.WTO+4
         AGO   .EXITCHK
.LOG     ANOP
         BAL   R3,&DEBUGLB.LOG         ===> Sub to output to the log
         L     R3,&DEBUGRG.03
         AGO   .EXITCHK
.EXITCHK ANOP
.*exit-start-
DEBU&SYSNDX DS    0H
         PR    ,                       ===> Return to Caller
ZZA&SYSNDX DC  C'&CSECT'               Callers CSECT name
ZZB&SYSNDX DC  C'&ID'                  Callers ID
&CNT     SETA  1
.CNTLOOP ANOP
ZZC&SYSNDX&CNT DC C'&SYSLIST(&CNT,1)='
&CNT     SETA  &CNT+1
         AIF   (&CNT LE N'&SYSLIST).CNTLOOP
&CSECT   CSECT
         POP   PRINT
         POP   USING
.*exit-end-
         LM    R14,&DBUGBAS,&DEBUGLB.SAV
         AIF   ('&DEBUGXT' EQ 'NO').EXTERN2
DEBUG_Z&SYSNDX DS 0H
.EXTERN2 ANOP
         AIF   ('&DEBUGRC' EQ 'ZERO').RC2
         AIF   ('&SYSLIST(1,1)' NE '&DEBUGR1').RC2
.RC2     ANOP
         AGO   .EXIT
.**********************************************************************
.*       Process the various DATA variables
.**********************************************************************
.DATA    ANOP
         AIF   ('&DATA' EQ 'V').VARS
         AIF   ('&DATA' EQ 'C').CONS
         AIF   ('&DATA' EQ 'G').GBLS
         AGO   .EXIT
.**********************************************************************
.*       Global Variables for the DEBUG macro
.**********************************************************************
.GBLS    ANOP
         AIF   ('&CLOSE' EQ 'YES').CLOSE1
         AIF   ('&DATA' NE 'G').GBLSNOG
&CSECT   SETC  '&SYSECT'
&DEBUGLB SETC  '&LABEL'
&DEBUGLB.000 CSECT ,                   Debug CSECT has been generated
         AIF   ('&MODE' NE 'YES').NOMODE
&DEBUGLB.000 AMODE 31                  Debug CSECT has been generated
&DEBUGLB.000 RMODE ANY                 Debug CSECT has been generated
.NOMODE  ANOP
&CSECT   CSECT
.GBLSNOG ANOP
&DEBUGRG SETC  '&REG'
&DEBUGR1 SETC  '&RCVAR'
&DEBUGRC SETC  '&RC'
&DEBUGTY SETC  '&TYPE'
&DEBUGML SETA  &MAXLEN
&DEBUGOP SETC  '&OPEN'
&DEBUGDD SETC  '&PRINT'
&DEBUGTM SETC  '&TIME'
&DEBUGEP SETC  '&EP'
&DEBUGRO SETC  '&ROUTCDE'
&DEBUGXT SETC  '&EXTERNAL'
&DBUGRNT SETC  '&RENT'
&DBUGBAS SETC  '&DEBBASE'
&DPGMBAS SETC  '&PGMBASE'
         AIF   ('&USING(2)' EQ '').USING2
&DBUGUSE SETC  '&USING(1),&USING(2)'
.USING2  ANOP
         AIF   ('&PGMBASE(2)' EQ '').BASEREG
&DPGMBAS SETC  '&PGMBASE(1),&PGMBASE(2)'
         AIF   ('&PGMBASE(3)' EQ '').BASEREG
&DPGMBAS SETC  '&PGMBASE(1),&PGMBASE(2),&PGMBASE(3)'
         AIF   ('&PGMBASE(4)' EQ '').BASEREG
&DPGMBAS SETC  '&PGMBASE(1),&PGMBASE(2),&PGMBASE(3),&PGMBASE(4)'
.BASEREG ANOP
&DBUGPGN SETC  'GEN'
         AIF   ('&PRINTGEN' EQ 'YES').PRNTGEN
&DBUGPGN SETC  'NOGEN'
.PRNTGEN ANOP
         AIF   ('&DEBUGOP' EQ 'NO').EXIT
.CLOSE1  ANOP
.*entry-start-
         STM   R14,R13,&DEBUGLB.SAV
         L     R15,=A(DBUG&SYSNDX)     Address of the debug entry
         BALR  R14,R15                 ===> Invoke Debug Routine
         PUSH  USING
         PUSH  PRINT
         PRINT &DBUGPGN
&DEBUGLB.000 CSECT
DBUG&SYSNDX DS 0H
         DROP  ,                       Drop all usings
         BAKR  R14,0                   Save the callers environment
         LR    &DBUGBAS,R15            Set Base
         USING DBUG&SYSNDX,&DBUGBAS
         USING &CSECT,&DPGMBAS
         AIF   ('&DBUGUSE' EQ '').USING3
         USING &DBUGUSE
.USING3  ANOP
         AIF   ('&USING2(2)' EQ '').USING2B
         USING &USING2(1),&USING2(2)
.USING2B ANOP
.*entry-end-
         AIF   ('&CLOSE' EQ 'YES').CLOSE2
         XC    &DEBUGLB.RB(20),&DEBUGLB.RB Zero the RB
         LA    R1,&DEBUGLB.RB          Address the SVC RB
         ST    R1,&DEBUGLB.RBP         Save the RB Pointer Address
         OI    &DEBUGLB.RBP,X'80'      And turn on the high order bit
         MVI   0(R1),20                Insert the RB length
         MVI   1(R1),1                 I want Allocation
         LA    R14,&DEBUGLB.TUP        Text Unit Pointer Address
         ST    R14,8(,R1)              Insert into RB
         LA    R1,&DEBUGLB.RBP         Set up SVC 99
         SVC   99                      And call it
                                       SPACE 1
         XC    &DEBUGLB.OPN,&DEBUGLB.OPN Zero the list
         OI    &DEBUGLB.OPN,X'80'      Indicate last in the list
         MVC   &DEBUGDD,&DEBUGLB.DCB   Copy the DCB below the line
         MVC   &DEBUGLB.DC1,&DEBUGLB.DCC Copy the DCBE below the line
         LA    R1,&DEBUGLB.DC1         Address of my DCBE
         ST    R1,&DEBUGDD             Saved in my DCB
         OPEN  (&DEBUGDD,(OUTPUT)),MODE=31,MF=(E,&DEBUGLB.OPN)
         AGO   .CLOSE3
.CLOSE2  ANOP
         CLOSE &DEBUGDD,MODE=31,MF=(E,&DEBUGLB.OPN)
         FREEPOOL &DEBUGDD
.CLOSE3  ANOP
.*exit-start-
         PR    ,                       ===> Return to Caller
&CSECT   CSECT
         POP   PRINT
         POP   USING
.*exit-end-
         LM    R14,&DBUGBAS,&DEBUGLB.SAV
         AGO   .EXIT
*---------------------------------------------------------------------*
*        Constants for the DEBUG macro                                *
*---------------------------------------------------------------------*
.CONS    ANOP
&DEBUGLB.000 CSECT
                                       SPACE
         AIF   ('&DEBUGTY' EQ 'WTL').CONSWTL2
         AIF   ('&DEBUGTY' EQ 'PUT').CONSPUT2
&DEBUGLB.CON WTO '&CSECT                                               X
                                                                     ',X
               ROUTCDE=&DEBUGRO,MF=L
&DEBUGLB.LEN EQU *-&DEBUGLB.CON        Length of WTO params
         AGO   .CONS2
.CONSWTL2 ANOP
&DEBUGLB.CON WTL '&CSECT                                               X
                                                                     ',X
               MF=L
&DEBUGLB.LEN EQU *-&DEBUGLB.CON        Length of WTO params
         AGO   .CONS2
.CONSPUT2 ANOP
&MAX     SETA  &DEBUGML+4
&DEBUGLB.CON DS 0F
         DC    CL&MAX' '
&DEBUGLB.LEN EQU *-&DEBUGLB.CON        Length of WTO params
.CONS2   ANOP
         AIF   ('&DEBUGTY' NE 'LOG').CONSDEBL
&DEBUGLB.LOG DS 0H
         BALR  &DBUGBAS,0
         USING *,&DBUGBAS
         USING &CSECT,&DPGMBAS
         L     R15,&DEBUGEP            SET UP FOR CALL
         CALL  (15),(DBUGVREP,DBUGSMSG,DBUGF018,&DEBUGLB.WTO+4),       *
               VL,MF=(E,&DEBUGLB.CAL)
         L     R15,&DEBUGEP            SET UP FOR CALL
         CALL  (15),(DBUGVREP,DBUGLMSG,DBUGF082,&DEBUGLB.WTO+23),      *
               VL,MF=(E,&DEBUGLB.CAL)
         L     R15,&DEBUGEP            SET UP FOR CALL
         CALL  (15),(DBUGLOG,DBUGZ001),VL,MF=(E,&DEBUGLB.CAL)
         BR    R3                      ===> Return to Caller
DBUGVREP DC    CL8'VREPLACE'           ISPF Constant
DBUGLOG  DC    CL8'LOG'                ISPF Constant
DBUGSMSG DC    CL8'ZEDSMSG'            ISPF Constant
DBUGLMSG DC    CL8'ZEDLMSG'            ISPF Constant
DBUGZ001 DC    CL8'ISRZ001'            ISPF Constant
DBUGF018 DC    F'18'                   ISPF Constant
DBUGF082 DC    F'82'                   ISPF Constant
.CONSDEBL ANOP
&DEBUGLB.LNG EQU *-&DEBUGLB.CON
*        DC    CL(&DEBUGLB.LNG)' '     Filler for DEBUGRTT-240
         AIF   ('&DEBUGOP' EQ 'NO').CONS3
&DEBUGLB.DCB DCB DDNAME=&DEBUGDD,DSORG=PS,MACRF=PM,RECFM=FB,           *
               DCBE=&DEBUGLB.DCC,LRECL=&DEBUGML
&DEBUGLB.DCL EQU *-&DEBUGLB.DCB        Length of the DCB
&DEBUGLB.DCC DCBE RMODE31=BUFF
&DEBUGLB.DEL EQU *-&DEBUGLB.DCC        Length of the DCBE
                                       SPACE 1
&DEBUGLB.TUP DC A(&DEBUGLB.TU1)        Text Unit Pointer
         DC    A(&DEBUGLB.TU2+X'80000000') Text Unit Pointer
&DEBUGLB.TU1 DC AL2(1,1,8),CL8'&DEBUGDD' DD
&DEBUGLB.TU2 DC AL2(24,1,1),C'X'       Sysout Class
                                       SPACE 1
         AIF   ('&DEBUGTM' EQ 'NO').NOTIME2
&DEBUGLB.TIM DS 0H
         TIME  DEC,&DEBUGLB.CLK,DATETYPE=YYYYMMDD,LINKAGE=SYSTEM,      *
               MF=(E,&DEBUGLB.TMC)
         UNPK  &DEBUGLB.WK(9),&DEBUGLB.DAT(5) Convert Date to EBCDIC
         MVC   &DEBUGLB.WTO+4(8),&DEBUGLB.WK Save yyyymmdd
         UNPK  &DEBUGLB.WK(9),&DEBUGLB.CLK(5) Convert Time to EBCDIC
         MVC   &DEBUGLB.WTO+13(8),&DEBUGLB.WK Save hhmmssth
         BR    R3                      ===> Return to Caller
.NOTIME2 ANOP
.CONS3   ANOP
&DEBUGLB.TRT DC C'0123456789ABCDEF'    Debug Translate Table
&CSECT   CSECT
         AGO   .EXIT
.VARS    ANOP
*---------------------------------------------------------------------*
*        Variables for the DEBUG macro                                *
*---------------------------------------------------------------------*
                                       SPACE
&DEBUGLB.DB DC D'0'                    CVB/CVD Work Area
&DEBUGLB.SAV DS 0F                     Register Saver Area
&DEBUGRG.14 DC F'0'                    Save Area for Register 14
&DEBUGRG.15 DC F'0'                    Save Area for Register 15
&DEBUGR1 EQU   &DEBUGRG.15+3           Low order byte of R15
&DEBUGRG.00 DC F'0'                    Save Area for Register 00
&DEBUGRG.01 DC F'0'                    Save Area for Register 01
&DEBUGRG.02 DC F'0'                    Save Area for Register 02
&DEBUGRG.03 DC F'0'                    Save Area for Register 03
&DEBUGRG.04 DC F'0'                    Save Area for Register 04
&DEBUGRG.05 DC F'0'                    Save Area for Register 05
&DEBUGRG.06 DC F'0'                    Save Area for Register 06
&DEBUGRG.07 DC F'0'                    Save Area for Register 07
&DEBUGRG.08 DC F'0'                    Save Area for Register 08
&DEBUGRG.09 DC F'0'                    Save Area for Register 09
&DEBUGRG.10 DC F'0'                    Save Area for Register 10
&DEBUGRG.11 DC F'0'                    Save Area for Register 11
&DEBUGRG.12 DC F'0'                    Save Area for Register 12
&DEBUGRG.13 DC F'0'                    Save Area for Register 13
&DEBUGLB.CLK DC CL8' '                 Save Area for the Time Stamp
&DEBUGLB.DAT DC CL8' '                 Save Area for the Date Stamp
&DEBUGLB.XTN DC C' '                   External Debug Control
&DEBUGLB.TMC TIME MF=L,LINKAGE=SYSTEM  Time Work Area
         AIF   ('&DBUGRNT' NE 'NO').RENT5
&DEBUGLB.000 CSECT
.RENT5   ANOP
&DEBUGLB.RBP DC A(&DEBUGLB.RB+X'80000000') SVC 99 RB Pointer
&DEBUGLB.RB DC 5F'0'                   SVC 99 RB
&DEBUGLB.CAL DC 5F'0'                  Call Parameter List
&DEBUGLB.WK DC CL9' '                  Debug Work Area
         DS    0F
&DEBUGLB.WTO DC CL(&DEBUGLB.LEN)' '    Changeable WTO params
         DC    CL(&DEBUGLB.LEN)' '     Changeable WTO params
         DS    0F
         AIF   ('&DEBUGOP' EQ 'NO').EXIT
&DEBUGLB.OPN DS D                      Open Exit List
&DEBUGDD DS    CL(&DEBUGLB.DCL)        Storage for my DCB
         DS    0F
&DEBUGLB.DC1 DS CL(&DEBUGLB.DEL)       Storage for my DCBE
         AIF   ('&DBUGRNT' NE 'NO').RENT6
&CSECT   CSECT
.RENT6   ANOP
                                       SPACE
.EXIT    ANOP
         MEND
