Introduction
The Debug macro is used in an assembler program to dump the contents of
selected storage in either character or hexadecimal format. This allows
a program to be debugged in batch where online debugging is not a viable
option. The DEBUG macro must be called to initialise the DEBUG
environment before DEBUG activity may take place.

The DEBUG labels are all prefixed with DEBUG, except for the RC and REGnn
variables.

Register Contents
No register contents are lost in the invocation of the DEBUG macro, as all
register contents are saved before any DEBUG processing takes place and
the contents are restored wh DEBUG processing is complete. The conditionen
code is not carried across and therefore is lost
                                                                        .

Code Generated
The majority of code generated by the DEBUG macro resides in a separate
CSECT named DBUG0000. This CSECT is entered at a unique location for
every invocation of the DEBUG macro.  Each invocation of the macro
requires 18 bytes in the assembler CSECT being debugged, except for the
storage Initialisation parameters DATA=C or DATA=V.

******************** Initial Invocation Parameters *********************

DATA=YES | G | C | V
=G Generates Global parameters and initialises DEBUG environment, and is
also used to CLOSE the DEBUG output file for TYPE=PUT.
=V Generates storage for variables. The variables reside in either a DS
addressable by the USING parameter for re-entrant code, or in the main
Program CSECT addressable by the PGMBASE parameter. This is dependent on
the location of the DEBUG macro with this parameter.
=C Generates storage for constants. The constants reside in the DEBUG000
CSECT.
=YES, default debug action to be taken.

TEST=YES | NO
=YES, DEBUG code is generated only if SYSPARM(TEST) is coded on the
assembly.
=NO, code is generated regardless of the SYSPARM value.

MAXLEN=100
=n Maximum amount of data that can be displayed in bytes, ie DEBUG
buffer size

TYPE=WTO | LOG | PUT | WTL
=WTO generates a Write To Operator message
=WTL issues a write to job message log
=LOG issues a write to ISPF log dataset
=PUT issues messages to the DCB defined in the PRINT parameter, which
must be open.

EP=EPLOC
=EPLOC Provides the ISPLINK entry point for TYPE=LOG

OPEN=NO | YES
=YES, open the PRINT DCB for TYPE=PUT
=NO, do not open the PRINT DCB for TYPE=PUT

CLOSE=NO | YES
=YES, close the PRINT DCB for TYPE=PUT
=NO, do not close the PRINT DCB for TYPE=PUT

PRINT=SYSDEBUG | ddname
DD name of the print output and label on the DCB macro. This DD will
be dynamically allocated as a SYSOUT=* file.

TIME=NO | YES
=YES, insert the current date and time in the debug message in front of
the CSECT identifier.
=NO, do not generate a date and time stamp on the debug message.

ROUTCDE=11 | n
=n ROUTCDE for TYPE=WTO

RC=ZERO | NZERO
=NZERO on a Global call, and RC is selected on a debug call and the
value of RC is "0" then do not debug the statement. RC must be the first
data field for this option to work.
=ZERO, always debug the RC value.

RCVAR=RC | variable name
RCVAR defines the internal name for the variable that will contain the
return code byte from register 15.

PGMBASE=R12 | Program Base Registers
PGMBASE tells the DEBUG environment what the program base registers are.
This parameter cannot be R2 as R2 is used by the debug routine as its
base register.Refer DEBBASE

DEBBASE=R2
Defines the base register to be used by the DEBUG000 CSECT

RENT=YES | NO
=YES, the work data area is in the main CSECT
=NO, the work data area is in the main DSECT.

USING=(DSECT,Base Register)
The USING parameter defines a permanent work area (DSECT) and its base
register to allow the DBUG0000 CSECT addressability to that work area.
This is coded on the initial invocation of the DEBUG macro and the work
area is then addressable to all subsequent DEBUG invocations. The base
register parameter cannot be R2 as R2 is used by the debug routine as
its base register. Refer DEBBASE

PRINTGEN=YES | NO
=YES, all DBUG0000 CSECT code has PRINT GEN
=NO, all DBUG0000 CSECT code has PRINT NOGEN

REG=REG
Provide a default prefix for register variables
Note: Variables REG00 through REG15 are available and contain the
register contents at invocation of the DEBUG macro. Variable RC (set by
RCVAR above) contains the last byte of REG15.

LABEL=DEBUG
Default prefix for all generated variable names other than &REG.

MODE=YES | No
=YES generate AMODE 31 and RMODE ANY
=NO

EXTERNAL=NO | YES
=NO
=YES allows the execution of the macro to be controlled by the variable
&DEBUG.XTN which if it contains Y the debug code is executed.

******************** Mainline Invocation Parameters ********************

ID=value
ID provides an ID value in the DEBUG message.

USING2=(DSECT,Base Register)
USING2 defines a DSECT and its base register to allow the DBUG0000 CSECT
addressability to that work area. The base register parameter cannot be
R2 as it is used by debug as its base register. Refer DEBBASE

(Field,Length,Type)
Coded when ID=value, supplies the "Field" name to display, its "Length"
and its "Type".  Type is "X" for hexadecimal, or "C" for character
display
Note: This entry may be repeated as often as required.

**************************** Usage Examples ****************************

(1) DEBUG DATA=G,TYPE=PUT,OPEN=YES,MAXLEN=132,USING=(GS,R13)
(2) DEBUG ID=INITIAL,(EYEBALL,28,C),(REG14,8,X)
(3) DEBUG ID=DYNALLOC,(RC,1,X),(S99ERROR,2,X),USING2=(S99RB,R9)
(4) DEBUG DATA=G,CLOSE=YES
(5) DEBUG DATA=C                  DEBUG Constants
(6) DEBUG DATA=V                  DEBUG Variables

(1) Initialises the DEBUG environment, specifying TYPE=PUT for IO to the
SYSDEBUG DCB, OPEN=YES to open the SYSDEBUG DCB, MAXLEN=132 to set the
SYSDEBUG buffer to 132 bytes and USING=(GS,R13) to pass to all DEBUG
invocations addressability to the GS DSECT using R13 as the base
register.
(2) Writes a debug record containing the identifier INITIAL, the
contents of the variable EYEBALL in character format for a length of 28
bytes, the contents of the variable REG14 in hexadecimal for a length of
8 bytes.
(3) Write a debug record containing the identifier DYNALLOC, the
contents of the variable RC in hexadecimal for 1 byte, the contents of
S99ERROR in hexadecimal for 2 bytes and the addressability of S99ERROR
is defined with the USING2 statement.
(4) Close the SYSDEBUG DCB
(5) Defines the constants used by the DEBUG macro.
(6) Defines the variables written to by the debug macro.
